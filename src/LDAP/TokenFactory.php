<?php

namespace phpLDAPpass\LDAP;


class TokenFactory
{
    /**
     * @var User
     */
    protected $user;

    /**
     * The duration of the validity period for tokens generated by this instance.
     * @var string
     */
    protected $duration;

    /**
     * @param User $user
     * @param string $duration
     */
    public function __construct($user, $duration = '4 hours')
    {
        $this->user = $user;
        $this->duration = $duration;
    }

    /**
     * @param int $expiry
     * @param string $salt
     * @return string
     */
    protected function generateToken($expiry, $salt)
    {
        return sprintf(
            '%d-%s',
            $expiry,
            base64_encode(
                sha1($expiry . $this->user->getDn() . $this->user->getMail() . $salt, true) . $salt
            )
        );
    }

    /**
     * This is relatively safe because we
     *   a) Include a salt
     *   b) Don't usually disclose DNs to users
     *
     * @return string
     */
    public function getToken()
    {
        $salt = base64_encode(openssl_random_pseudo_bytes(6, $secure));
        while (!$secure) {
            $salt = base64_encode(openssl_random_pseudo_bytes(6, $secure));
        }
        $salt = substr($salt, 0, 4);

        $expiry = strtotime('+' . $this->duration);

        return $this->generateToken($expiry, $salt);
    }

    /**
     * @param string $token
     * @return bool
     */
    public function checkToken($token)
    {
        if (false === strpos($token, '-')) {
            throw new \InvalidArgumentException('Invalid token');
        }

        list($expiry, $hash) = explode('-', $token, 2);

        $expiry = intval($expiry, 10);
        $hash = base64_decode($hash);
        $salt = substr($hash, -4);

        if ($this->generateToken($expiry, $salt) === $token) {
            // Token matches
            if (time() <= $expiry) {
                // Within the time
                return true;
            }
        }

        return false;
    }

    /**
     * @return User
     */
    public function getUser()
    {
        return $this->user;
    }

}
